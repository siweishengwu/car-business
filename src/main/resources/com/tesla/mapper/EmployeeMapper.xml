<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.tesla.mapper.EmployeeMapper">
    <resultMap id="BaseResultMap" type="com.tesla.domain.Employee">
        <id column="id" property="id"/>
        <result column="username" property="username"/>
        <result column="name" property="name"/>
        <result column="password" property="password"/>
        <result column="email" property="email"/>
        <result column="age" property="age"/>
        <result column="admin" property="admin"/>
        <result column="d_id" property="dept.id"/>
        <result column="d_name" property="dept.name"/>
        <result column="d_sn" property="dept.sn"/>
    </resultMap>
    <delete id="deleteByPrimaryKey">
        delete
        from employee
        where id = #{id}
    </delete>
    <delete id="deleteRelation">
        delete from employee_role where employee_id =#{employeeId}
    </delete>
    <insert id="insert" useGeneratedKeys="true" keyProperty="id">
        insert into employee (username, name, password, email, age, admin, dept_id)
        values (#{username}, #{name}, #{password}, #{email}, #{age}, #{admin}, #{dept.id})
    </insert>
    <insert id="insertRelation">
        insert into employee_role(employee_id, role_id) VALUES (#{employeeId},#{roleId})
    </insert>
    <update id="updateByPrimaryKey">
        update employee
        set name     = #{name},
            email    = #{email},
            age      = #{age},
            admin    = #{admin},
            dept_id  = #{dept.id}
        where id = #{id}
    </update>
    <update id="changePassword">
        update employee
        set password  = #{password}
        where id = #{id}
    </update>
    <select id="selectByPrimaryKey" resultMap="BaseResultMap">
        select e.id
             , e.username
             , e.name
             , e.password
             , e.email
             , e.age
             , e.admin
             , e.dept_id
             , d.id   AS d_id
             , d.name as d_name
             , d.sn   as d_sn
        from employee e
                 left join department d on e.dept_id = d.id
        where e.id = #{id}
    </select>
    <select id="selectAll" resultMap="BaseResultMap">
        select id,
               username,
               name,
               password,
               email,
               age,
               admin,
               dept_id
        from employee
    </select>

    <sql id="where_sql">
        <where>
            <if test="keyword != null">
                and (e.name like concat('%',#{keyword},'%') or e.email like concat('%',#{keyword},'%'))
            </if>
            <if test="deptId != null">
                and e.dept_id = #{deptId}
            </if>
        </where>
    </sql>

    <select id="selectForList" resultMap="BaseResultMap">
        select e.id, e.username, e.name, e.password, e.email, e.age, e.admin, e.dept_id,d.id AS d_id,d.name as d_name
        , d.sn as d_sn
        from employee e
        left join department d on e.dept_id = d.id
        <include refid="where_sql"/>
    </select>
    <select id="selectByUsername" resultType="java.lang.Boolean">
        select * from employee where username = #{username}
    </select>
    <select id="selectByUsernameAndPassword" resultType="com.tesla.domain.Employee">
        select * from employee where username =#{username} and password =#{password}
    </select>
</mapper>